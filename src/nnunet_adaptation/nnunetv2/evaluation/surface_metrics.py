from typing import List, Tuple, Union, Optional
import numpy as np
from scipy import ndimage


neighbour_code_to_normals = [
    [[0, 0, 0]],
    [[0.125, 0.125, 0.125]],
    [[-0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [0.25, 0.25, -0.0]],
    [[0.125, -0.125, 0.125]],
    [[-0.25, -0.0, -0.25], [0.25, 0.0, 0.25]],
    [[0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[0.5, 0.0, -0.0], [0.25, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[-0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25]],
    [[0.5, 0.0, 0.0], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [[0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [[0.5, 0.0, 0.0], [0.25, -0.25, 0.25], [-0.125, 0.125, -0.125]],
    [[-0.5, 0.0, 0.0], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[0.5, 0.0, 0.0], [0.5, 0.0, 0.0]],
    [[0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25]],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.5, 0.0], [0.25, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, 0.0, -0.5], [0.25, 0.25, 0.25], [-0.125, -0.125, -0.125]],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [
        [-0.125, -0.125, -0.125],
        [-0.25, -0.25, -0.25],
        [0.25, 0.25, 0.25],
        [0.125, 0.125, 0.125],
    ],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25], [0.125, -0.125, -0.125]],
    [
        [0.125, 0.125, 0.125],
        [0.375, 0.375, 0.375],
        [0.0, -0.25, 0.25],
        [-0.25, 0.0, 0.25],
    ],
    [[0.125, -0.125, -0.125], [0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [
        [0.375, 0.375, 0.375],
        [0.0, 0.25, -0.25],
        [-0.125, -0.125, -0.125],
        [-0.25, 0.25, 0.0],
    ],
    [
        [-0.5, 0.0, 0.0],
        [-0.125, -0.125, -0.125],
        [-0.25, -0.25, -0.25],
        [0.125, 0.125, 0.125],
    ],
    [[-0.5, 0.0, 0.0], [-0.125, -0.125, -0.125], [-0.25, -0.25, -0.25]],
    [[0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.0, -0.25, 0.25], [0.0, 0.25, -0.25]],
    [[0.0, -0.5, 0.0], [0.125, 0.125, -0.125], [0.25, 0.25, -0.25]],
    [[0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.125, -0.125, 0.125], [-0.25, -0.0, -0.25], [0.25, 0.0, 0.25]],
    [[0.0, -0.25, 0.25], [0.0, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [
        [-0.375, -0.375, 0.375],
        [-0.0, 0.25, 0.25],
        [0.125, 0.125, -0.125],
        [-0.25, -0.0, -0.25],
    ],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.0, 0.0, 0.5], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [
        [0.25, 0.25, -0.25],
        [0.25, 0.25, -0.25],
        [0.125, 0.125, -0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[0.125, -0.125, 0.125], [0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [
        [0.5, 0.0, 0.0],
        [0.25, -0.25, 0.25],
        [-0.125, 0.125, -0.125],
        [0.125, -0.125, 0.125],
    ],
    [
        [0.0, 0.25, -0.25],
        [0.375, -0.375, -0.375],
        [-0.125, 0.125, 0.125],
        [0.25, 0.25, 0.0],
    ],
    [[-0.5, 0.0, 0.0], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [[0.25, -0.25, 0.0], [-0.25, 0.25, 0.0]],
    [[0.0, 0.5, 0.0], [-0.25, 0.25, 0.25], [0.125, -0.125, -0.125]],
    [[0.0, 0.5, 0.0], [0.125, -0.125, 0.125], [-0.25, 0.25, -0.25]],
    [[0.0, 0.5, 0.0], [0.0, -0.5, 0.0]],
    [[0.25, -0.25, 0.0], [-0.25, 0.25, 0.0], [0.125, -0.125, 0.125]],
    [
        [-0.375, -0.375, -0.375],
        [-0.25, 0.0, 0.25],
        [-0.125, -0.125, -0.125],
        [-0.25, 0.25, 0.0],
    ],
    [
        [0.125, 0.125, 0.125],
        [0.0, -0.5, 0.0],
        [-0.25, -0.25, -0.25],
        [-0.125, -0.125, -0.125],
    ],
    [[0.0, -0.5, 0.0], [-0.25, -0.25, -0.25], [-0.125, -0.125, -0.125]],
    [[-0.125, 0.125, 0.125], [0.25, -0.25, 0.0], [-0.25, 0.25, 0.0]],
    [
        [0.0, 0.5, 0.0],
        [0.25, 0.25, -0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [
        [-0.375, 0.375, -0.375],
        [-0.25, -0.25, 0.0],
        [-0.125, 0.125, -0.125],
        [-0.25, 0.0, 0.25],
    ],
    [[0.0, 0.5, 0.0], [0.25, 0.25, -0.25], [-0.125, -0.125, 0.125]],
    [[0.25, -0.25, 0.0], [-0.25, 0.25, 0.0], [0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [[-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0], [-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0]],
    [[-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0]],
    [[-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [-0.25, -0.25, 0.0], [0.25, 0.25, -0.0]],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25]],
    [[0.0, 0.0, 0.5], [0.25, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [
        [0.375, -0.375, 0.375],
        [0.0, -0.25, -0.25],
        [-0.125, 0.125, -0.125],
        [0.25, 0.25, 0.0],
    ],
    [[-0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25]],
    [
        [0.5, 0.0, 0.0],
        [-0.25, -0.25, 0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.0, 0.5, 0.0], [-0.25, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [
        [-0.25, 0.25, -0.25],
        [-0.25, 0.25, -0.25],
        [-0.125, 0.125, -0.125],
        [-0.125, 0.125, -0.125],
    ],
    [
        [-0.25, 0.0, -0.25],
        [0.375, -0.375, -0.375],
        [0.0, 0.25, -0.25],
        [-0.125, 0.125, 0.125],
    ],
    [[0.5, 0.0, 0.0], [-0.25, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [[-0.25, 0.0, 0.25], [0.25, 0.0, -0.25]],
    [[-0.0, 0.0, 0.5], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [-0.25, 0.0, 0.25], [0.25, 0.0, -0.25]],
    [
        [-0.25, -0.0, -0.25],
        [-0.375, 0.375, 0.375],
        [-0.25, -0.25, 0.0],
        [-0.125, 0.125, 0.125],
    ],
    [[0.0, 0.0, -0.5], [0.25, 0.25, -0.25], [-0.125, -0.125, 0.125]],
    [[-0.0, 0.0, 0.5], [0.0, 0.0, 0.5]],
    [[0.125, 0.125, 0.125], [0.125, 0.125, 0.125], [0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [[0.125, 0.125, 0.125], [0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [[-0.25, 0.0, 0.25], [0.25, 0.0, -0.25], [-0.125, 0.125, 0.125]],
    [
        [-0.0, 0.0, 0.5],
        [0.25, -0.25, 0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25], [0.25, 0.0, -0.25]],
    [[0.125, -0.125, 0.125], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [
        [0.25, 0.0, 0.25],
        [-0.375, -0.375, 0.375],
        [-0.25, 0.25, 0.0],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.0, 0.0, 0.5], [0.25, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [[0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [0.0, -0.25, 0.25], [0.0, 0.25, -0.25]],
    [
        [0.0, -0.5, 0.0],
        [0.125, 0.125, -0.125],
        [0.25, 0.25, -0.25],
        [-0.125, -0.125, 0.125],
    ],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [
        [0.0, 0.0, 0.5],
        [0.25, -0.25, 0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [0.0, 0.25, -0.25]],
    [[0.0, 0.25, 0.25], [0.0, 0.25, 0.25], [0.125, -0.125, -0.125]],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [
        [-0.125, 0.125, 0.125],
        [0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
        [0.125, 0.125, 0.125],
    ],
    [
        [-0.0, 0.0, 0.5],
        [-0.25, -0.25, 0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [
        [-0.0, 0.5, 0.0],
        [-0.25, 0.25, -0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.5, 0.0, -0.0], [0.25, -0.25, -0.25], [0.125, -0.125, -0.125]],
    [
        [-0.25, 0.25, 0.25],
        [-0.125, 0.125, 0.125],
        [-0.25, 0.25, 0.25],
        [0.125, -0.125, -0.125],
    ],
    [
        [0.375, -0.375, 0.375],
        [0.0, 0.25, 0.25],
        [-0.125, 0.125, -0.125],
        [-0.25, 0.0, 0.25],
    ],
    [[0.0, -0.5, 0.0], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [
        [-0.375, -0.375, 0.375],
        [0.25, -0.25, 0.0],
        [0.0, 0.25, 0.25],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.125, 0.125, 0.125], [-0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [[0.125, 0.125, 0.125], [0.0, 0.25, 0.25], [0.0, 0.25, 0.25]],
    [[0.0, 0.25, 0.25], [0.0, 0.25, 0.25]],
    [
        [0.5, 0.0, -0.0],
        [0.25, 0.25, 0.25],
        [0.125, 0.125, 0.125],
        [0.125, 0.125, 0.125],
    ],
    [[0.125, -0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, 0.125, 0.125]],
    [[-0.25, -0.0, -0.25], [0.25, 0.0, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [0.25, 0.25, -0.0], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [0.25, 0.25, -0.0], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [[-0.25, -0.0, -0.25], [0.25, 0.0, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, -0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, 0.125, 0.125]],
    [
        [0.5, 0.0, -0.0],
        [0.25, 0.25, 0.25],
        [0.125, 0.125, 0.125],
        [0.125, 0.125, 0.125],
    ],
    [[0.0, 0.25, 0.25], [0.0, 0.25, 0.25]],
    [[0.125, 0.125, 0.125], [0.0, 0.25, 0.25], [0.0, 0.25, 0.25]],
    [[-0.125, 0.125, 0.125], [-0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [
        [-0.375, -0.375, 0.375],
        [0.25, -0.25, 0.0],
        [0.0, 0.25, 0.25],
        [-0.125, -0.125, 0.125],
    ],
    [[0.0, -0.5, 0.0], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [
        [0.375, -0.375, 0.375],
        [0.0, 0.25, 0.25],
        [-0.125, 0.125, -0.125],
        [-0.25, 0.0, 0.25],
    ],
    [
        [-0.25, 0.25, 0.25],
        [-0.125, 0.125, 0.125],
        [-0.25, 0.25, 0.25],
        [0.125, -0.125, -0.125],
    ],
    [[0.5, 0.0, -0.0], [0.25, -0.25, -0.25], [0.125, -0.125, -0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [
        [-0.0, 0.5, 0.0],
        [-0.25, 0.25, -0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [
        [-0.0, 0.0, 0.5],
        [-0.25, -0.25, 0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [
        [-0.125, 0.125, 0.125],
        [0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
        [0.125, 0.125, 0.125],
    ],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[0.0, 0.25, 0.25], [0.0, 0.25, 0.25], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25], [0.0, 0.25, 0.25], [0.0, 0.25, 0.25]],
    [
        [0.0, 0.0, 0.5],
        [0.25, -0.25, 0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [
        [0.0, -0.5, 0.0],
        [0.125, 0.125, -0.125],
        [0.25, 0.25, -0.25],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.125, -0.125, 0.125], [0.0, -0.25, 0.25], [0.0, 0.25, -0.25]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [[0.125, 0.125, 0.125], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [[-0.0, 0.0, 0.5], [0.25, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [
        [0.25, 0.0, 0.25],
        [-0.375, -0.375, 0.375],
        [-0.25, 0.25, 0.0],
        [-0.125, -0.125, 0.125],
    ],
    [[0.125, -0.125, 0.125], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [[-0.25, -0.0, -0.25], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25], [0.25, 0.0, 0.25]],
    [
        [-0.0, 0.0, 0.5],
        [0.25, -0.25, 0.25],
        [0.125, -0.125, 0.125],
        [0.125, -0.125, 0.125],
    ],
    [[-0.25, 0.0, 0.25], [0.25, 0.0, -0.25], [-0.125, 0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [[0.125, 0.125, 0.125], [0.125, 0.125, 0.125], [0.25, 0.25, 0.25], [0.0, 0.0, 0.5]],
    [[-0.0, 0.0, 0.5], [0.0, 0.0, 0.5]],
    [[0.0, 0.0, -0.5], [0.25, 0.25, -0.25], [-0.125, -0.125, 0.125]],
    [
        [-0.25, -0.0, -0.25],
        [-0.375, 0.375, 0.375],
        [-0.25, -0.25, 0.0],
        [-0.125, 0.125, 0.125],
    ],
    [[-0.125, -0.125, 0.125], [-0.25, 0.0, 0.25], [0.25, 0.0, -0.25]],
    [[-0.0, 0.0, 0.5], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[-0.25, 0.0, 0.25], [0.25, 0.0, -0.25]],
    [[0.5, 0.0, 0.0], [-0.25, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [
        [-0.25, 0.0, -0.25],
        [0.375, -0.375, -0.375],
        [0.0, 0.25, -0.25],
        [-0.125, 0.125, 0.125],
    ],
    [
        [-0.25, 0.25, -0.25],
        [-0.25, 0.25, -0.25],
        [-0.125, 0.125, -0.125],
        [-0.125, 0.125, -0.125],
    ],
    [[-0.0, 0.5, 0.0], [-0.25, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [
        [0.5, 0.0, 0.0],
        [-0.25, -0.25, 0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.125, -0.125, 0.125], [-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [
        [0.375, -0.375, 0.375],
        [0.0, -0.25, -0.25],
        [-0.125, 0.125, -0.125],
        [0.25, 0.25, 0.0],
    ],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [[0.0, 0.0, 0.5], [0.25, -0.25, 0.25], [0.125, -0.125, 0.125]],
    [[0.0, -0.25, 0.25], [0.0, -0.25, 0.25]],
    [[-0.125, -0.125, 0.125], [-0.25, -0.25, 0.0], [0.25, 0.25, -0.0]],
    [[-0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[-0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0]],
    [[0.125, 0.125, 0.125], [-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0]],
    [[-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0], [-0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0], [-0.25, -0.25, 0.0], [0.25, 0.25, -0.0]],
    [[0.0, 0.5, 0.0], [0.25, 0.25, -0.25], [-0.125, -0.125, 0.125]],
    [
        [-0.375, 0.375, -0.375],
        [-0.25, -0.25, 0.0],
        [-0.125, 0.125, -0.125],
        [-0.25, 0.0, 0.25],
    ],
    [
        [0.0, 0.5, 0.0],
        [0.25, 0.25, -0.25],
        [-0.125, -0.125, 0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.125, 0.125, 0.125], [0.25, -0.25, 0.0], [-0.25, 0.25, 0.0]],
    [[0.0, -0.5, 0.0], [-0.25, -0.25, -0.25], [-0.125, -0.125, -0.125]],
    [
        [0.125, 0.125, 0.125],
        [0.0, -0.5, 0.0],
        [-0.25, -0.25, -0.25],
        [-0.125, -0.125, -0.125],
    ],
    [
        [-0.375, -0.375, -0.375],
        [-0.25, 0.0, 0.25],
        [-0.125, -0.125, -0.125],
        [-0.25, 0.25, 0.0],
    ],
    [[0.25, -0.25, 0.0], [-0.25, 0.25, 0.0], [0.125, -0.125, 0.125]],
    [[0.0, 0.5, 0.0], [0.0, -0.5, 0.0]],
    [[0.0, 0.5, 0.0], [0.125, -0.125, 0.125], [-0.25, 0.25, -0.25]],
    [[0.0, 0.5, 0.0], [-0.25, 0.25, 0.25], [0.125, -0.125, -0.125]],
    [[0.25, -0.25, 0.0], [-0.25, 0.25, 0.0]],
    [[-0.5, 0.0, 0.0], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [
        [0.0, 0.25, -0.25],
        [0.375, -0.375, -0.375],
        [-0.125, 0.125, 0.125],
        [0.25, 0.25, 0.0],
    ],
    [
        [0.5, 0.0, 0.0],
        [0.25, -0.25, 0.25],
        [-0.125, 0.125, -0.125],
        [0.125, -0.125, 0.125],
    ],
    [[0.125, -0.125, 0.125], [0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [
        [0.25, 0.25, -0.25],
        [0.25, 0.25, -0.25],
        [0.125, 0.125, -0.125],
        [-0.125, -0.125, 0.125],
    ],
    [[-0.0, 0.0, 0.5], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [
        [-0.375, -0.375, 0.375],
        [-0.0, 0.25, 0.25],
        [0.125, 0.125, -0.125],
        [-0.25, -0.0, -0.25],
    ],
    [[0.0, -0.25, 0.25], [0.0, 0.25, -0.25], [0.125, -0.125, 0.125]],
    [[0.125, -0.125, 0.125], [-0.25, -0.0, -0.25], [0.25, 0.0, 0.25]],
    [[0.125, -0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.0, -0.5, 0.0], [0.125, 0.125, -0.125], [0.25, 0.25, -0.25]],
    [[0.0, -0.25, 0.25], [0.0, 0.25, -0.25]],
    [[0.125, 0.125, 0.125], [0.125, -0.125, 0.125]],
    [[0.125, -0.125, 0.125]],
    [[-0.5, 0.0, 0.0], [-0.125, -0.125, -0.125], [-0.25, -0.25, -0.25]],
    [
        [-0.5, 0.0, 0.0],
        [-0.125, -0.125, -0.125],
        [-0.25, -0.25, -0.25],
        [0.125, 0.125, 0.125],
    ],
    [
        [0.375, 0.375, 0.375],
        [0.0, 0.25, -0.25],
        [-0.125, -0.125, -0.125],
        [-0.25, 0.25, 0.0],
    ],
    [[0.125, -0.125, -0.125], [0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [
        [0.125, 0.125, 0.125],
        [0.375, 0.375, 0.375],
        [0.0, -0.25, 0.25],
        [-0.25, 0.0, 0.25],
    ],
    [[-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[-0.125, 0.125, 0.125], [0.125, -0.125, -0.125]],
    [
        [-0.125, -0.125, -0.125],
        [-0.25, -0.25, -0.25],
        [0.25, 0.25, 0.25],
        [0.125, 0.125, 0.125],
    ],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, 0.0, -0.5], [0.25, 0.25, 0.25], [-0.125, -0.125, -0.125]],
    [[0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.5, 0.0], [0.25, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[-0.125, -0.125, 0.125], [0.125, -0.125, -0.125]],
    [[0.0, -0.25, -0.25], [0.0, 0.25, 0.25]],
    [[0.125, -0.125, -0.125]],
    [[0.5, 0.0, 0.0], [0.5, 0.0, 0.0]],
    [[-0.5, 0.0, 0.0], [-0.25, 0.25, 0.25], [-0.125, 0.125, 0.125]],
    [[0.5, 0.0, 0.0], [0.25, -0.25, 0.25], [-0.125, 0.125, -0.125]],
    [[0.25, -0.25, 0.0], [0.25, -0.25, 0.0]],
    [[0.5, 0.0, 0.0], [-0.25, -0.25, 0.25], [-0.125, -0.125, 0.125]],
    [[-0.25, 0.0, 0.25], [-0.25, 0.0, 0.25]],
    [[0.125, 0.125, 0.125], [-0.125, 0.125, 0.125]],
    [[-0.125, 0.125, 0.125]],
    [[0.5, 0.0, -0.0], [0.25, 0.25, 0.25], [0.125, 0.125, 0.125]],
    [[0.125, -0.125, 0.125], [-0.125, -0.125, 0.125]],
    [[-0.25, -0.0, -0.25], [0.25, 0.0, 0.25]],
    [[0.125, -0.125, 0.125]],
    [[-0.25, -0.25, 0.0], [0.25, 0.25, -0.0]],
    [[-0.125, -0.125, 0.125]],
    [[0.125, 0.125, 0.125]],
    [[0, 0, 0]],
]


def compute_surface_distances(mask_gt, mask_pred, spacing_mm):
    # taken from https://github.com/google-deepmind/surface-distance/blob/master/surface_distance/metrics.py
    neighbour_code_to_surface_area = np.zeros([256])
    for code in range(256):
        normals = np.array(neighbour_code_to_normals[code])
        sum_area = 0
        for normal_idx in range(normals.shape[0]):
            n = np.zeros([3])
            n[0] = normals[normal_idx, 0] * spacing_mm[1] * spacing_mm[2]
            n[1] = normals[normal_idx, 1] * spacing_mm[0] * spacing_mm[2]
            n[2] = normals[normal_idx, 2] * spacing_mm[0] * spacing_mm[1]
            area = np.linalg.norm(n)
            sum_area += area
        neighbour_code_to_surface_area[code] = sum_area

    mask_all = mask_gt | mask_pred
    bbox_min = np.zeros(3, np.int64)
    bbox_max = np.zeros(3, np.int64)

    proj_0 = np.max(np.max(mask_all, axis=2), axis=1)
    idx_nonzero_0 = np.nonzero(proj_0)[0]
    if len(idx_nonzero_0) == 0:
        return {
            "distances_gt_to_pred": np.array([]),
            "distances_pred_to_gt": np.array([]),
            "surfel_areas_gt": np.array([]),
            "surfel_areas_pred": np.array([]),
        }

    bbox_min[0] = np.min(idx_nonzero_0)
    bbox_max[0] = np.max(idx_nonzero_0)

    proj_1 = np.max(np.max(mask_all, axis=2), axis=0)
    idx_nonzero_1 = np.nonzero(proj_1)[0]
    bbox_min[1] = np.min(idx_nonzero_1)
    bbox_max[1] = np.max(idx_nonzero_1)

    proj_2 = np.max(np.max(mask_all, axis=1), axis=0)
    idx_nonzero_2 = np.nonzero(proj_2)[0]
    bbox_min[2] = np.min(idx_nonzero_2)
    bbox_max[2] = np.max(idx_nonzero_2)

    cropmask_gt = np.zeros((bbox_max - bbox_min) + 2, np.uint8)
    cropmask_pred = np.zeros((bbox_max - bbox_min) + 2, np.uint8)

    cropmask_gt[0:-1, 0:-1, 0:-1] = mask_gt[
        bbox_min[0] : bbox_max[0] + 1,
        bbox_min[1] : bbox_max[1] + 1,
        bbox_min[2] : bbox_max[2] + 1,
    ]

    cropmask_pred[0:-1, 0:-1, 0:-1] = mask_pred[
        bbox_min[0] : bbox_max[0] + 1,
        bbox_min[1] : bbox_max[1] + 1,
        bbox_min[2] : bbox_max[2] + 1,
    ]

    kernel = np.array([[[128, 64], [32, 16]], [[8, 4], [2, 1]]])
    neighbour_code_map_gt = ndimage.correlate(
        cropmask_gt.astype(np.uint8), kernel, mode="constant", cval=0
    )
    neighbour_code_map_pred = ndimage.correlate(
        cropmask_pred.astype(np.uint8), kernel, mode="constant", cval=0
    )

    borders_gt = (neighbour_code_map_gt != 0) & (neighbour_code_map_gt != 255)
    borders_pred = (neighbour_code_map_pred != 0) & (neighbour_code_map_pred != 255)

    if borders_gt.any():
        distmap_gt = ndimage.distance_transform_edt(~borders_gt, sampling=spacing_mm)
    else:
        distmap_gt = np.inf * np.ones(borders_gt.shape)

    if borders_pred.any():
        distmap_pred = ndimage.distance_transform_edt(
            ~borders_pred, sampling=spacing_mm
        )
    else:
        distmap_pred = np.inf * np.ones(borders_pred.shape)

    surface_area_map_gt = neighbour_code_to_surface_area[neighbour_code_map_gt]
    surface_area_map_pred = neighbour_code_to_surface_area[neighbour_code_map_pred]

    distances_gt_to_pred = distmap_pred[borders_gt]
    distances_pred_to_gt = distmap_gt[borders_pred]
    surfel_areas_gt = surface_area_map_gt[borders_gt]
    surfel_areas_pred = surface_area_map_pred[borders_pred]

    if distances_gt_to_pred.shape != (0,):
        sorted_surfels_gt = np.array(sorted(zip(distances_gt_to_pred, surfel_areas_gt)))
        distances_gt_to_pred = sorted_surfels_gt[:, 0]
        surfel_areas_gt = sorted_surfels_gt[:, 1]

    if distances_pred_to_gt.shape != (0,):
        sorted_surfels_pred = np.array(
            sorted(zip(distances_pred_to_gt, surfel_areas_pred))
        )
        distances_pred_to_gt = sorted_surfels_pred[:, 0]
        surfel_areas_pred = sorted_surfels_pred[:, 1]

    return {
        "distances_gt_to_pred": distances_gt_to_pred,
        "distances_pred_to_gt": distances_pred_to_gt,
        "surfel_areas_gt": surfel_areas_gt,
        "surfel_areas_pred": surfel_areas_pred,
    }


def compute_surface_dice_at_tolerance(surface_distances, tolerance_mm):
    distances_gt_to_pred = surface_distances["distances_gt_to_pred"]
    distances_pred_to_gt = surface_distances["distances_pred_to_gt"]
    surfel_areas_gt = surface_distances["surfel_areas_gt"]
    surfel_areas_pred = surface_distances["surfel_areas_pred"]
    overlap_gt = np.sum(surfel_areas_gt[distances_gt_to_pred <= tolerance_mm])
    overlap_pred = np.sum(surfel_areas_pred[distances_pred_to_gt <= tolerance_mm])
    surface_dice = (
        (overlap_gt + overlap_pred)
        / (np.sum(surfel_areas_gt) + np.sum(surfel_areas_pred))
        if np.sum(surfel_areas_gt) + np.sum(surfel_areas_pred) > 0
        else 1
    )
    return surface_dice


def NSD(
    gt: np.ndarray,
    pred: np.ndarray,
    spacing_mm: Union[List[float], Tuple[float, float, float]],
    tolerance: float = 1.0,
    ignore_mask: Optional[np.ndarray] = None,
) -> float:
    gt_mask = gt if ignore_mask is None else gt & ~ignore_mask
    pred_mask = pred if ignore_mask is None else pred & ~ignore_mask
    surface_distances = compute_surface_distances(
        gt_mask, pred_mask, spacing_mm=spacing_mm
    )
    surface_dice = compute_surface_dice_at_tolerance(
        surface_distances, tolerance_mm=tolerance
    )
    return surface_dice
